/// \file straybasic.h
/// \author Paolo Caressa <github.com/pcaressa>
/// \date 20250106

/** This file contains the DB symbolic information related to the StrayBasic
    language: error codes and error messages, instruction labels and information
    about the operators.
    
    Rows in the DB are listed in the form MACRO(data,...) where MACRO can be one
    of E, I or O. At least one of these macros should be defined, otherwise the
    inclusion will have no effect. They are all undefined at exit.  */

#ifndef E
    #define E(code, message)
#endif
#ifndef I
    #define I(label)
#endif
#ifndef O
    #define O(name, label, arity, isinfix, priority)
#endif

//  Errors: E(code, message)
E(NONE, "READY")
E(ASSIGNMENT, "\"=\" EXPECTED")
E(BREAK, "BREAK INTO PROGRAM")
E(CHANNEL_BUSY, "CHANNEL BUSY")
E(CHANNEL_CLOSED, "CHANNEL CLOSED")
E(CLOSEDPAR, "\")\" EXPECTED")
E(COMMA, "\",\" EXPECTED")
E(DATA, "ILLEGAL DATA STATEMENT")
E(DOMAIN, "DOMAIN ERROR")
E(EOL_INSIDE_STRING, "END OF LINE INSIDE STRING")
E(EXPRESSION_TOO_LONG, "EXPRESSION TOO LONG")
E(FILE, "CANNOT OPEN FILE")
E(FORVAR, "FOR INDEX EXPECTED")
E(FOR_WITHOUT_NEXT, "FOR WITHOUT NEXT")
E(HASH, "\"#\" EXPECTED")
E(IDENTIFIER, "IDENTIFIER EXPECTED")
E(ILLEGAL_ATTRIBUTE, "ILLEGAL ATTRIBUTE")
E(ILLEGAL_CHANNEL, "ILLEGAL CHANNEL")
E(ILLEGAL_CONVERSION, "ILLEGAL CONVERSION")
E(ILLEGAL_INPUT, "ILLEGAL INPUT")
E(ILLEGAL_INSTRUCTION, "ILLEGAL INSTRUCTION")
E(ILLEGAL_OUTSIDE_PROGRAM, "ILLEGAL INSTRUCTION OUTSIDE PROGRAM")
E(ILLEGAL_LINE_NUMBER, "ILLEGAL LINE NUMBER")
E(ILLEGAL_MODE, "ILLEGAL FILE MODE")
E(NUMVAR, "NUMERICAL VARIABLE EXPECTED")
E(ON, "ON VALUE OUT OF LIST")
E(OPENEDPAR, "\"(\" EXPECTED")
E(OPENPAR_WITHOUT_CLOSEPAR, "\"(\" WITHOUT \")\"")
E(OUT_OF_DATA, "OUT OF DATA")
E(OUT_OF_STRINGS, "NO MORE ROOM FOR STRINGS")
E(OUT_OF_VARIABLES, "NO MORE ROOM FOR VARIABLES")
E(STOP, "PROGRAM STOPPED")
E(PROGRAM_TOO_LONG, "PROGRAM TOO LONG")
E(RETURN, "RETURN WITHOUT GOSUB")
E(STRVAR, "STRING VARIABLE EXPECTED")
E(SUBSCRIPT, "MISSING SUBSCRIPT")
E(SUBSCRIPT_RANGE, "SUBSCRIPT OUT OF RANGE")
E(SYNTAX, "SYNTAX ERROR")
E(TO_EXPECTED, "\"TO\" EXPECTED")
E(TOO_MANY_GOSUB, "TOO MANY NESTED GOSUBS")
E(TYPE, "TYPE MISMATCH")
E(VALUE, "VALUE EXPECTED")
E(UNDEFINED_VARIABLE, "UNDEFINED VARIABLE")
E(VARIABLE_ALREADY_DEFINED, "VARIABLE ALREADY DEFINED")
E(ZERO, "DIVISION BY ZERO")

//  Instructions: I(label)
I(ATTR)
I(BYE)
I(CHAIN)
I(CLEAR)
I(CLOSE)
I(CLS)
I(DATA)
I(DEF)
I(DIM)
I(DUMP)
I(END)
I(ERROR)
I(FOR)
I(GOSUB)
I(GOTO)
I(IF)
I(INPUT)
I(LET)
I(LINPUT)
I(LIST)
I(LOAD)
I(MERGE)
I(NEW)
I(NEXT)
I(ON)
I(OPEN)
I(PRINT)
I(RANDOMIZE)
I(READ)
I(REM)
I(REPEAT)
I(RESTORE)
I(RETURN)
I(RUN)
I(SAVE)
I(SKIP)
I(STEP)
I(STOP)
I(SYS)
I(THEN)
I(TO)
I(TRACE)

//  Operators: O(name, label, arity, isinfix, priority)
O("&", CONCAT, 2, 1, 50)
O("*", MUL, 2, 1, 60)
O("+", PLUS, 2, 1, 50)
O("-", MINUS, 2, 1, 50)
O("-", NEG, 1, 0, 70)
O("/", DIV, 2, 1, 60)
O("<", LT, 2, 1, 30)
O("<=", LEQ, 2, 1, 30)
O("<>", NEQ, 2, 1, 30)
O("=", EQ, 2, 1, 30)
O(">", GT, 2, 1, 30)
O(">=", GEQ, 2, 1, 30)
O("ABS", ABS, 1, 0, 100)
O("ACS", ACS, 1, 0, 100)
O("AND", AND, 2, 1, 10)
O("ASC", ASC, 1, 0, 100)
O("ASN", ASN, 1, 0, 100)
O("AT", AT, 2, 0, 100)
O("ATN", ATN, 1, 0, 100)
O("CHR$", CHRS, 1, 0, 100)
O("COL", COL, 0, 0, 100)
O("COS", COS, 1, 0, 100)
O("DIV", IDIV, 2, 0, 100)
O("EOF", EOF, 1, 0, 100)
O("ERR", ERR, 0, 0, 100)
O("EXP", EXP, 1, 0, 100)
O("INKEY$", INKEYS, 0, 0, 100)
O("INT", INT, 1, 0, 100)
O("LEFT$", LEFTS, 2, 0, 100)
O("LEN", LEN, 1, 0, 100)
O("LOG", LOG, 1, 0, 100)
O("MID$", MIDS, 3, 0, 100)
O("MOD", MOD, 2, 0, 100)
O("NOT", NOT, 1, 0, 20)
O("OR", OR, 2, 1, 10)
O("RIGHT$", RIGHTS, 2, 0, 100)
O("RND", RND, 0, 0, 100)
O("ROW", ROW, 0, 0, 100)
O("SGN", SGN, 1, 0, 100)
O("SIN", SIN, 1, 0, 100)
O("SQR", SQR, 1, 0, 100)
O("STR$", STRS, 1, 0, 100)
O("SUB$", SUBS, 3, 0, 100)
O("TAB", TAB, 1, 0, 100)
O("TAN", TAN, 1, 0, 100)
O("TIME", TIME, 0, 0, 100)
O("VAL", VAL, 1, 0, 100)
O("^", POW, 2, 1, 80)

#undef E
#undef I
#undef O
